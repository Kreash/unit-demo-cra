name: Release process

on:
  push:
    tags:
      - v[0-9]*

  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  create-issue:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create changelog
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}
          writeToFile: false

      - name: Create issue
        id: issue
        env:
          TAG_NAME: ${{ github.ref_name }}
          GH_TOKEN: ${{ github.token }}
        run: |
          TITLE="Release ${{ github.ref_name }}"
          BODY=$(cat << 'EOF'

          # Release ${{ github.ref_name }}

          Автор релиза: @${{ github.actor }}
          Дата релиза: ${{ github.event.head_commit.timestamp }}
          Версия релиза: ${{ github.ref_name }}

          ## CHANGELOG
          ${{ steps.changelog.outputs.changes }}

          EOF
          )

          ISSUE_ID=$(gh issue list --json number,title -q \
            ".[] | select(.title == \"$TITLE\") | .number")
          if [ ! -z "$ISSUE_ID" ]; then
            gh issue edit $ISSUE_ID --body "$BODY"
          else
            gh issue create --title "$TITLE" --body "$BODY" --assignee ${{ github.actor }} --label "release notes"
          fi
          echo "issueId=$ISSUE_ID" >> "$GITHUB_OUTPUT"

    outputs:
      issueNumber: ${{ steps.issue.outputs.issueId }}

  tests:
    name: tests
    runs-on: ubuntu-latest
    needs: [create-issue]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
      - name: Install packages
        run: npm ci
      - name: unit tests
        run: npm run test
      - name: Install Playwright Browsers
        run: npx playwright install chromium --with-deps
      - name: Run Playwright tests
        run: CI=true npx playwright test --project=chromium

      - name: Comment issue with test results
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ needs.create-issue.outputs.issueNumber }}
          body: |
            Download test results:
            ${{github.server_url}}/${{ github.repository }}/actions/runs/${{github.run_id}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    environment:
      name: github-pages
    runs-on: ubuntu-latest
    needs: [create-issue, tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Install and Build
        working-directory: ./
        run: |
          npm install && npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: "./build/."
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Close Issue
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ needs.create-issue.outputs.issueNumber }}
          comment: |
            Close Issue
            Issue automatically closed
